PROJECTNAME = "eight_queen_problem_game"
ROOT := $(shell git rev-parse --show-toplevel)
FLUTTER := $(shell which flutter)
FLUTTER_BIN_DIR := $(shell dirname $(FLUTTER))
DART := $(FLUTTER_BIN_DIR)/cache/dart-sdk/bin/dart
LEFTHOOK := $(shell which lefthook)
COVERDE := $(shell which coverde)
REPLACE := $(shell which replace)
OPEN := $(shell which open)
IGNORE_OUTPUT := >/dev/null
FILTER_OPTIONS := \.g.dart,\.freezed.dart,lib/firebase_options.*.dart,lib/utilities/auth0,lib/routing/routes.dart,lib/routing/listenable_stream.dart,lib/l10n,lib/main_.*.dart

init:
	@echo "Initializing project..."
	@$(MAKE) _init

init:

	@if which lefthook $(IGNORE_OUTPUT); then $(LEFTHOOK) install; fi
	@if ! which coverde $(IGNORE_OUTPUT); then $(FLUTTER) pub global activate coverde; fi
	@if ! which replace $(IGNORE_OUTPUT); then $(FLUTTER) pub global activate replace; fi

## analyze: check for issues in the app
analyze:
	$(FLUTTER) analyze

format:
	@$(DART) format $(shell find . -name "*.dart" ! -name '*.*freezed.dart' ! -name '*.*g.dart' ! -name 'app_localizations*.dart' ! -name 'dart_plugin_registrant.dart')

.PHONY: test
## test: test the app
test:
	@rm -rf coverage
	$(FLUTTER) test --coverage --test-randomize-ordering-seed random
	@make filter_test

.PHONY: report
## report: open the coverage reports generated by `test`
report:
	$(COVERDE) report -l -i coverage/filtered.lcov.info $(IGNORE_OUTPUT)

.PHONY: filter_test
## filter_test: remove unwanted test files from the test report
filter_test:
	@$(COVERDE) filter -f $(FILTER_OPTIONS) -m w $(IGNORE_OUTPUT)
	@$(REPLACE) $(shell pwd) '' coverage/filtered.lcov.info $(IGNORE_OUTPUT)

.PHONY: report_simple
## report_simple: prints out the coverage number
report_simple:
	@$(COVERDE) value -i coverage/filtered.lcov.info $(IGNORE_OUTPUT) --no-verbose > coverage/coverage.txt
	@$(REPLACE) '(%.*)|[^\d\.]' '' coverage/coverage.txt $(IGNORE_OUTPUT)
	@echo "`<coverage/coverage.txt`"

.PHONY: coverage
## coverage: tests and generate coverage report
coverage:
	make test
	make report

.PHONY: build_runner
## build_runner: generates automatic code
build_runner:
	$(DART) run build_runner watch --delete-conflicting-outputs